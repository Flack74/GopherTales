name: 🚀 Build and Deploy to AWS EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_to_aws:
        description: 'Deploy to AWS EKS'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: gophertales
  GO_VERSION: '1.21'

jobs:
  quality-check:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: 📥 Download dependencies
      run: go mod download

    - name: 🔍 Run go vet
      run: go vet ./...

    - name: 🧪 Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.out

  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    needs: quality-check
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-aws:
    name: 🚀 Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.deploy_to_aws == 'true' && github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🔧 Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: 🔗 Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: 🎯 Deploy to Kubernetes
      run: |
        sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" k8s/deployment.yaml
        kubectl apply -f k8s/
        kubectl rollout status deployment/gophertales -n gophertales --timeout=300s

    - name: 🔍 Verify deployment
      run: |
        kubectl get pods -n gophertales
        kubectl get services -n gophertales
        echo "🎉 Deployment successful to ${{ github.event.inputs.environment }}!"